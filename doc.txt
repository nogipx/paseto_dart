
max tokens

±13642 tokens

├── README.md
├── operations
    ├── ID.md
    ├── PBKW.md
    ├── PKE.md
    ├── README.md
    ├── Wrap.md
    └── Wrap
    │   ├── README.md
    │   ├── aws-kms.md
    │   └── pie.md
└── types
    ├── README.md
    ├── lid.md
    ├── local-pw.md
    ├── local-wrap.md
    ├── local.md
    ├── pid.md
    ├── public.md
    ├── seal.md
    ├── secret-pw.md
    ├── secret-wrap.md
    ├── secret.md
    └── sid.md


/README.md:
--------------------------------------------------------------------------------
  1 | # PASERK: Platform-Agnostic Serialized Keys
  2 |
  3 | PASERK is an extension to [PASETO](https://paseto.io) that provides key-wrapping and
  4 | serialization.
  5 |
  6 | ## Motivation
  7 |
  8 | PASETO provides two types of tokens (called a purpose) in each of its versions:
  9 |
 10 | | Purpose  | Cryptographic Operation                                            |
 11 | |----------|--------------------------------------------------------------------|
 12 | | `local`  | Symmetric-key authenticated encryption with additional data (AEAD) |
 13 | | `public` | Asymmetric-key digital signatures (**no encryption**)              |
 14 |
 15 | These two token modes solve at least 80% of use cases for secure tokens. You can
 16 | even solve *unencrypted* symmetric-key authentication by storing your claims in
 17 | the unencrypted footer, rather than encrypting them.
 18 |
 19 | The use-cases that PASETO doesn't address out of the box are:
 20 |
 21 | * Key-wrapping
 22 | * Asymmetric encryption
 23 | * Password-based key encryption
 24 |
 25 | PASERK aims to provide an answer for these circumstances, as well as provide a
 26 | consistent standard for the encoding of PASETO keys.
 27 |
 28 | ## PASERK
 29 |
 30 | A serialized key in PASERK has the format:
 31 |
 32 |     k[version].[type].[data]
 33 |
 34 | Where `[version]` is an integer, `[data]` is the (*typically* base64url-encoded)
 35 | payload data, and `[type]` is one of the items in the following table:
 36 |
 37 | | PASERK Type                           | Meaning                                                                     | PASETO Compatibility | \[data\] Encoded? | Safe in Footer? |
 38 | |---------------------------------------|-----------------------------------------------------------------------------|----------------------|-------------------|-----------------|
 39 | | [`lid`](types/lid.md)                 | Unique Identifier for a separate PASERK for `local` PASETOs.                | `local`              | Yes               | Yes             |
 40 | | [`local`](types/local.md)             | Symmetric key for `local` tokens.                                           | `local`              | Yes               | **No**          |
 41 | | [`seal`](types/seal.md)               | Symmetric key wrapped using asymmetric encryption.                          | `local`              | Yes               | Yes             |
 42 | | [`local-wrap`](types/local-wrap.md)   | Symmetric key wrapped by another symmetric key.                             | `local`              | No                | Yes             |
 43 | | [`local-pw`](types/local-pw.md)       | Symmetric key wrapped using password-based encryption.                      | `local`              | Yes               | **No**          |
 44 | | [`sid`](types/sid.md)                 | Unique Identifier for a separate PASERK for `public` PASETOs. (Secret Key)  | `public`             | Yes               | Yes             |
 45 | | [`public`](types/public.md)           | Public key for verifying `public` tokens.                                   | `public`             | Yes               | **No**          |
 46 | | [`pid`](types/pid.md)                 | Unique Identifier for a separate PASERK for `public` PASETOs. (Public Key)  | `public`             | Yes               | Yes             |
 47 | | [`secret`](types/secret.md)           | Secret key for signing `public` tokens.                                     | `public`             | Yes               | **No**          |
 48 | | [`secret-wrap`](types/secret-wrap.md) | Asymmetric secret key wrapped by another symmetric key.                     | `public`             | No                | Yes             |
 49 | | [`secret-pw`](types/secret-pw.md)     | Asymmetric secret key wrapped using password-based encryption.              | `public`             | Yes               | **No**          |
 50 |
 51 | The version of a PASERK **MUST** match the version of the PASETO it's used with.
 52 | For example, a `k2.local.` PASERK must be used with `v2.local.` tokens.
 53 | Cross-version support is explicitly **NOT** permitted.
 54 |
 55 | Each [**type**](types) is a composition of one or more [**operations**](operations).
 56 |
 57 | As one of the design criteria, it **MUST** be safe for users to store the ID PASERK for
 58 | a PASETO key (resulting in `lid`, `sid`, or `pid` types) in the footer
 59 | (or, in v3/v4 of PASETO, as an implicit assertion). These types **SHOULD** be stored
 60 | in the `kid` field in the footer, if the footer is JSON encoded.
 61 |
 62 | Any of these PASERK types **MAY** be stored in the PASETO footer (in the `wpk` claim),
 63 | because the encoded key is also wrapped with additional layers of cryptography:
 64 | `local-wrap`, `seal`, `secret-wrap`. The wrapping key **MUST NOT** be disclosed.
 65 |
 66 | All other types **MUST NOT** be included in a PASETO footer.
 67 |
 68 | ## Examples of Valid PASERKs in a PASETO Footer
 69 |
 70 | ```json
 71 | {"kid":"k4.lid.iVtYQDjr5gEijCSjJC3fQaJm7nCeQSeaty0Jixy8dbsk"}
 72 | ```
 73 | ```json
 74 | {"kid":"k4.pid.9ShR3xc8-qVJ_di0tc9nx0IDIqbatdeM2mqLFBJsKRHs"}
 75 | ```
 76 | ```json
 77 | {"kid":"k4.sid.gHYyx8y5YzqKEZeYoMDqUOKejdSnY_AWhYZiSCMjR1V5"}
 78 | ```
 79 |
 80 | The PASERK key ID is always okay to include in a PASETO footer.
 81 |
 82 | -----
 83 |
 84 | ```json
 85 | {"wpk":"k4.local-wrap.pie.pu-fBxwoXrICYjeumh77cJ6la4svNGrjshQ7W_ygiJzm80LQBB1e6yqODDq6HO8c0UNY_dzLkzZC62Z81eleoIYUChwymEx23KbTQDinWaOQoKkRantNkrD5o0eo8iCS"}
 86 | ```
 87 | ```json
 88 | {"wpk":"k4.secret-wrap.pie.jLhVAJYWaOcKiFvnKv6kFEQxSGV9BQuW1Qt4jRwr6yHiNeQf2h1GQ0czBJZpveX5T0R0YZv2OEenf8uyLqwamDJUbtS-GdYp_TXT1OJCwGJb2UpEHvcSOciH2PVCEiTrLM9n_mAI4SWXDfw4xYenmINDhi8EiPaPKvsOU64YBvY"}
 89 | ```
 90 |
 91 | Wrapped keys are encrypted. As long as the wrapping key is confidential, this is safe.
 92 |
 93 | -----
 94 |
 95 | ```json
 96 | {"wpk":"k4.seal.3-VOL4pX5b7eV3uMhYHfOhJNN77YyYtd7wYXrH9rRucKNmq0aO-6AWIFU4xOXUCBk0mzBZeWAPAKrvejqixqeRXm-MQXt8yFGHmM1RzpdJw80nabbyDIsNCpBwltU-uj"}
 97 | ```
 98 |
 99 | Sealed keys are wrapped using public-key encryption. As long as the unwrapping key (asymmetric
100 | secret key) is confidential, this is safe.
101 |
102 | ## Examples of Invalid PASERKs in a PASETO Footer
103 |
104 | ```json
105 | {"wpk":"k4.local.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo8"}
106 | ```
107 |
108 | This is a `local` type, and it is forbidden. Critically, it would disclose a symmetric
109 | key if included in an unencrypted PASETO footer.
110 |
111 | ```json
112 | {"wpk":"k3.secret.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo-QkZKTlJWWl5iZmpucnZ6f"}
113 | ```
114 |
115 | This is a `secret` type, and it is forbidden. Critically, it would disclose an asymmetric
116 | secret key if included in an unencrypted PASETO footer.
117 |
118 | ```json
119 | {"wpk":"k3.public.AnBxcnN0dXZ3eHl6e3x9fn-AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2enw"}
120 | ```
121 |
122 | This is [forbidden by the PASETO specification](https://github.com/paseto-standard/paseto-spec/blob/master/docs/02-Implementation-Guide/01-Payload-Processing.md#key-id-support):
123 |
124 | > **IMPORTANT**: Key identifiers MUST be independent of the actual keys
125 | > used by Paseto.
126 | >
127 | > For example, you MUST NOT just drop the public key into the footer for
128 | > a `public` token and have the recipient use the provided public key.
129 | > Doing so would allow an attacker to simply replace the public key with
130 | > one of their own choosing, which will cause the recipient to simply
131 | > accept any signature for any message as valid, which defeats the
132 | > security goals of public-key cryptography.
133 | >
134 | > Instead, it's recommended that implementors and users use a unique
135 | > identifier for each key (independent of the cryptographic key's contents
136 | > itself) that is used in a database or other key-value store to select
137 | > the apppropriate cryptographic key. These search operations MUST fail
138 | > closed if no valid key is found for the given key identifier.
139 |
140 | Even though a public key might seem harmless, it risks the encouragement of
141 | in-band negotiation. This could result in users trusting the attacker-provided
142 | public key associated with a PASETO, which would bypass the security offered by
143 | the security token. Therefore, this use case **MUST NOT** ever be permitted.
144 |
145 | -----
146 |
147 | ```json
148 | {"wpk":"k4.local-pw._bru5tnkPSFXOtKhBTmW4gAAAAAEAAAAAAAAAgAAAAGKI3PyFS2vyQ9o5qowCR_GUXskLmdV1bjjc3vqnbwN7hVG1lAUCGjElTGIoH-K6lnkHnP4uaFBKWEtB3xFEGzAjzBSnl_JBmwLYK5jstjAV6LnJm_NOt0j"}
149 | ```
150 | ```json
151 | {"wpk":"k4.secret-pw.dkyi7kfzHnVTCqTq1AvLyQAAAAAQAAAAAAAAAwAAAAFWNLgB_yXNkk4W9NiXgeTkNnB3Vjuk_-TFQ-vMUxNX-Ha3k42djov9rHVykMHkrSGUemYFwpot9uNHnXOWtJCVIwdYAwZmt_uRSJ2rRTElanT6mWXojuBUy2k1lxD-iZ10pVPkJ-Kvv_SLEhLQ8RS7wqFW8RfFGyw"}
152 | ```
153 |
154 | Password-based key-wrapping is provided in PASERK for systems that need
155 | password-protected cryptographic secrets, but password-protected keys **MUST NOT**
156 | be included in a PASETO footer.
157 |
158 | ## PASERK Implementations
159 |
160 | * [**PHP** (Reference Implementation)](https://github.com/paragonie/paserk-php)
161 |


--------------------------------------------------------------------------------
/operations/ID.md:
--------------------------------------------------------------------------------
 1 | # PASERK IDs
 2 |
 3 | This operation calculates the unique ID for a given PASERK.
 4 |
 5 | ## Related Types
 6 |
 7 | * [`lid`](../types/lid.md) for `local` tokens
 8 | * [`pid`](../types/pid.md) for `public` tokens (public key)
 9 | * [`sid`](../types/sid.md) for `public` tokens (secret key)
10 |
11 | ## PASERK Versions
12 |
13 | ### Versions 1 and 3
14 |
15 | Set `h` to the version and token type (for example, `k3.lid.` for
16 | any PASERK intended for `v3.local.` tokens), with a trailing period.
17 |
18 | Calculate the SHA-384 hash of `h` and the entire PASERK string,
19 | then truncate to 264 bits (33 bytes, which will encode evenly into a
20 | 44-byte base64url-encoded string) to obtain the data `d`
21 | (`d = SHA384(h || p)[0:33]`).
22 |
23 | Return `h || base64url(d)`.
24 |
25 | ### Versions 2 and 4
26 |
27 | Set `h` to the version and token type (for example, `k4.pid.` for
28 | any PASERK intended for `v4.public.` tokens), with a trailing period.
29 |
30 | Calculate the BLAKE2b-264 hash of `h` and the entire PASERK string
31 | to obtain the data `d` (`d = crypto_generichash(h || p, 33)`).
32 | When base64url-encoded, `d` will produce an unpadded 44-byte string.
33 |
34 | Return `h || base64url(d)`.
35 |


--------------------------------------------------------------------------------
/operations/PBKW.md:
--------------------------------------------------------------------------------
  1 | # PBKD (Password-Based Key Wrapping)
  2 |
  3 | Derive a unique encryption key from a password, then use it to wrap
  4 | the key.
  5 |
  6 | ## Related Types
  7 |
  8 | * [`local-pw`](../types/local-pw.md) for `local` tokens
  9 | * [`secret-pw`](../types/secret-pw.md) for `public` tokens
 10 |
 11 | ## Definitions
 12 |
 13 | **crypto_generichash()** is BLAKE2b with a variable-length output that defaults
 14 | to 256 bits (32 bytes), as implemented in [libsodium](https://libsodium.gitbook.io/doc/hashing/generic_hashing).
 15 |
 16 | **long2bytes()** converts a 64-bit unsigned integer into a sequence of 8 octets
 17 | (big-endian byte order).
 18 |
 19 | **int2bytes()** converts a 32-bit unsigned integer into a sequence of 4 octets
 20 | (big-endian byte order).
 21 |
 22 | ## PASERK Versions
 23 |
 24 | ### Versions 1 and 3
 25 |
 26 | Algorithms: PBKDF2, HMAC-SHA384, AES-256-CTR, SHA-384
 27 |
 28 | The header `h` will depend on the exact version and mode being used
 29 | (with a trailing period). It will be one of
 30 | (`k1.local-pw.`, `k1.secret-pw.`, `k3.local-pw.`, `k3.secret-pw.`).
 31 |
 32 | #### V1/V3 Encryption
 33 |
 34 | Given a plaintext key (`ptk`), password (`pw`), and iteration
 35 | count (`i`, defaults to 100,000):
 36 |
 37 | 1. Generate a random 256-bit (32 byte) salt (`s`).
 38 | 2. Derive the 256-bit (32 byte) pre-key `k` from the password and salt.
 39 |    `k = PBKDF2-SHA384(pw, s, i)`
 40 | 3. Derive the encryption key (`Ek`) from `SHA-384(0xFF || k)`, truncated to
 41 |    the 32 most significant bytes (`Ek = hash[0:31]`).
 42 | 4. Derive the authentication key (`Ak`) from `SHA-384(0xFE || k)`.
 43 | 5. Generate a random 128-bit nonce (`n`).
 44 | 6. Encrypt the plaintext key `ptk` with `Ek` and `n` to obtain the
 45 |    encrypted data key `edk`.
 46 |    `edk = AES-256-CTR(msg=ptk, key=Ek, nonce=n)`
 47 | 7. Calculate the authentication tag `t` over
 48 |    `h`, `s`, `i`, `n`, and `edk`.
 49 |    ```
 50 |    t = HMAC-SHA-384(
 51 |        msg = h || s || int2bytes(i) || n || edk,
 52 |        key = Ak
 53 |    )
 54 |    ```
 55 | 8. Return `h`, `s`, `i`, `n`, `edk`, `t`.
 56 |
 57 | #### V1/V3 Decryption
 58 |
 59 | Given a password (`pw`), salt (`s`), iteration count (`i`), nonce (`n`),
 60 | encrypted data key (`edk`), and authentication tag `t`:
 61 |
 62 | 1. Assert that the header `h` is correct for the expected version of the wrapped key.
 63 | 2. Derive the pre-key `k` from the password and salt.
 64 |    `k = PBKDF2-SHA384(pw, s, i)`
 65 | 3. Derive the authentication key (`Ak`) from `SHA-384(0xFE || k)`.
 66 | 4. Recalculate the authentication tag `t2` over
 67 |    `h`, `s`, `i`, `n`, and `edk`.
 68 |    ```
 69 |    t2 = HMAC-SHA-384(
 70 |        msg = h || s || int2bytes(i) || n || edk,
 71 |        key = Ak
 72 |    )
 73 |    ```
 74 | 5. Compare `t` with `t2` using a constant-time string comparison function.
 75 |    If it fails, abort.
 76 | 6. Derive the encryption key (`Ek`) from `SHA-384(0xFF || k)`.
 77 | 7. Decrypt the encrypted key (`edk`) with `Ek` and `n` to obtain the
 78 |    plaintext key `ptk`.
 79 |    `ptk = AES-256-CTR(msg=edk, key=Ek, nonce=n)`
 80 | 8. Return `ptk`
 81 |
 82 |
 83 | ### Versions 2 and 4
 84 |
 85 | Algorithms: Argon2id, BLAKE2b, XChaCha20
 86 |
 87 | The header `h` will depend on the exact version and mode being used
 88 | (with a trailing period). It will be one of
 89 | (`k2.local-pw.`, `k2.secret-pw.`, `k4.local-pw.`, `k4.secret-pw.`).
 90 |
 91 | #### V2/V4 Encryption
 92 |
 93 | Given a plaintext key (`ptk`), password (`pw`), memory cost (`mem`),
 94 | time cost (`time`), and parallelism degree (`para`):
 95 |
 96 | 1. Generate a random 128-bit (16 byte) salt (`s`).
 97 | 2. Derive the 256-bit (32 byte) pre-key `k` from the password and salt.
 98 |    `k = Argon2id(pw, s, mem, time, para)`
 99 | 3. Derive the encryption key (`Ek`) from `crypto_generichash(0xFF || k)`.
100 | 4. Derive the authentication key (`Ak`) from `crypto_generichash(0xFE || k)`.
101 | 5. Generate a random 192-bit (24 byte) nonce (`n`).
102 | 6. Encrypt the plaintext key (`ptk`) with `Ek` and `n` to obtain the
103 |    encrypted data key `edk`.
104 |    `edk = XChaCha20(msg=ptk, key=Ek, nonce=n)`
105 | 7. Calculate the authentication tag `t` over
106 |    `h`, `s`, `mem`, `time`, `para`, `n`, and `edk`.
107 |    ```
108 |    t = crypto_generichash(
109 |        msg = h || s || long2bytes(mem) || int2bytes(time) || int2bytes(para) || n || edk,
110 |        key = Ak,
111 |        length = 32 # 32 bytes, 256 bits
112 |    )
113 |    ```
114 | 8. Return `h`, `s`, `mem`, `time`, `para`, `n`, `edk`, `t`.
115 |
116 | #### V2/V4 Decryption
117 |
118 | Given a password (`pw`), salt (`s`), memory cost (`mem`),
119 | time cost (`time`), parallelism degree (`para`), nonce (`n`),
120 | encrypted data key (`edk`), and authentication tag `t`:
121 |
122 | 1. Assert that the header `h` is correct for the expected version of the wrapped key.
123 | 2. Derive the pre-key `k` from the password and salt.
124 |    `k = Argon2id(pw, s, mem, time, para)`
125 | 3. Derive the authentication key (`Ak`) from `crypto_generichash(0xFE || k)`.
126 | 4. Recalculate the authentication tag `t2` over
127 |    `h`, `s`, `mem`, `time`, `para`, `n`, and `edk`.
128 |    ```
129 |    t2 = crypto_generichash(
130 |        msg = h || s || long2bytes(mem) || int2bytes(time) || int2bytes(para) || n || edk,
131 |        key = Ak,
132 |        length = 32 # 32 bytes, 256 bits
133 |    )
134 |    ```
135 | 5. Compare `t` with `t2` using a constant-time string comparison function.
136 |    If it fails, abort.
137 | 6. Derive the encryption key (`Ek`) from `crypto_generichash(0xFF || k)`.
138 | 7. Decrypt the encrypted key (`edk`) with `Ek` and `n` to obtain the
139 |    plaintext key `ptk`.
140 |    `ptk = XChaCha20(msg=edk, key=Ek, nonce=n)`
141 | 8. Return `ptk`.
142 |


--------------------------------------------------------------------------------
/operations/PKE.md:
--------------------------------------------------------------------------------
  1 | # PKE (Public-Key Encryption)
  2 |
  3 | PASERK uses Public-Key encryption to wrap symmetric keys for use in `local` tokens.
  4 |
  5 | ## Related Types
  6 |
  7 | * [`seal`](../types/seal.md)
  8 |
  9 | ## PASERK Versions
 10 |
 11 | ### Version 1
 12 |
 13 | Algorithms: RSA-KEM, AES-256-CTR, SHA-384, HMAC-SHA-384
 14 |
 15 | The constant `h` in the algorithms below will be set to `k1.seal.`
 16 | (with the trailing period), and the unwrapped key MUST only be used for
 17 | `v1.local.` PASETOs.
 18 |
 19 | The RSA keys used for public-key encryption in PASERK are necessarily larger
 20 | than the keys used by PASETO. This is an intentional design decision intended
 21 | to prevent the use of an RSA keypair for both signing and encryption.
 22 |
 23 | * PASETO v1.public uses 2048-bit RSA, and can only be used to sign.
 24 | * PASERK v1.seal supports 4096-bit RSA, and can only be used to encrypt.
 25 |
 26 | #### V1 Encryption
 27 |
 28 | Given a plaintext data key (`pdk`) and RSA public key (`pk`) (which **MUST** have
 29 | a modulus `n` larger than 2^4095 and smaller than 2^4096 + 1 and a public exponent
 30 | `e` equal to 65537).
 31 |
 32 | 1. Generate a random number `r` between 0 and the modulus (`n`) of the public key (`pk`).
 33 |    * We recommend generating a string of random bytes, then clearing the leftmost
 34 |      bit of the first byte, and setting the subsequent bit.
 35 |      ```
 36 |      r = random_bytes(512) // 512 bytes = 4096 bits
 37 |      r[0] &= 0x7f   # Clear the first bit
 38 |      r[0] |= 0x40   # Set the second bit
 39 |      ```
 40 |      This yields a random value with 4094 bits of uncertainty, and ensures that r^e (mod n)
 41 |      wraps the modulus.
 42 |
 43 |      This is a very fast way to generate a large random number between 0 and n-1,
 44 |      without side-channel leakage from big integer comparison, but it does have two
 45 |      fixed bits in the message.
 46 | 2. RSA-encrypt `r` with the `pk`, with no padding mode, to get the RSA ciphertext `c`.
 47 | 3. Calculate (`Ek`, `n`) as `HMAC-SHA-384(msg = 0x01 || h || r, key = SHA384(c))`.
 48 |    The leftmost 256 bits will be the encryption key (`Ek`). The remaining 128 bits
 49 |    will be the initial counter (`n)`.
 50 | 4. Calculate `Ak` as `HMAC-SHA-384(msg = 0x02 || h || r, key = SHA384(c))`.
 51 | 5. Encrypt the plaintext data key (`pdk`) with `Ek` and `n`, using AES-256-CTR.
 52 |    This will be the encrypted data key (`edk`).
 53 | 6. Calculate the auth tag, `t`, as `HMAC-SHA-384(msg = h || c || edk, key = Ak)`.
 54 | 7. Return `t`, `edk`, `c`.
 55 |
 56 | #### V1 Decryption
 57 |
 58 | Given an RSA secret key (`sk`), encrypted data key (`edk`),
 59 | RSA ciphertext (`c`), and auth tag (`t`).
 60 |
 61 | 1. Verify that the header `h` is equal to `k1.seal.` and the secret key is an RSA key
 62 |    whose corresponding public modulus is 4096 bits.
 63 | 2. Decrypt `c` using `sk` to get `r`.
 64 | 3. Calculate `Ak` as
 65 |    `hmac_sha384(msg = 0x02 || h || r, key = SHA384(c))`.
 66 | 4. Recalculate the auth tag (`t2`) as
 67 |    `hmac_sha384(msg = h || c || edk, key = Ak)`.
 68 | 5. Compare `t2` with `t`, using a constant-time compare function. If it does not
 69 |    match, abort.
 70 | 6. Calculate (`Ek`, `n`) as
 71 |    `hmac_sha384(msg = 0x01 || h || r, key = SHA384(c))`.
 72 |    The leftmost 256 bits will be the encryption key (`Ek`). The remaining 128 bits
 73 |    will be the initial counter (`n)`.
 74 | 7. Decrypt the encrypted data key (`edk`) with `Ek` and `n`, using AES-256-CTR.
 75 |    This will result in the plaintext data key (`pdk`).
 76 | 8. Return `pdk`.
 77 |
 78 | ### Version 2 and 4
 79 |
 80 | Algorithms: X25519, XChaCha20, BLAKE2b
 81 |
 82 | For version 2, the constant `h` in the algorithms below will be set to `k2.seal.`
 83 | (with the trailing period), and the unwrapped key MUST only be used for
 84 | `v2.local.` PASETOs.
 85 |
 86 | For version 4, the constant `h` in the algorithms below will be set to `k4.seal.`
 87 | (with the trailing period), and the unwrapped key MUST only be used for
 88 | `v4.local.` PASETOs.
 89 |
 90 | Note: `BLAKE2b-256` means BLAKE2b with a 256-bit output, while `BLAKE2b-192` is
 91 | BLAKE2b with a 192-bit output.
 92 |
 93 | #### V2/V4 Encryption
 94 |
 95 | Given a plaintext data key (`pdk`), and an Ed25519 public key (`pk`).
 96 |
 97 | 1. Calculate the birationally-equivalent X25519 public key (`xpk`) from `pk`.
 98 | 2. Generate a random, ephemeral X25519 keypair (`esk`, `epk`).
 99 | 3. Calculate the shared secret `xk` from
100 |    `crypto_scalarmult(esk, xpk)`.
101 | 4. Calculate the encryption key `Ek` from
102 |    `BLAKE2b-256(0x01 || h || xk || epk || xpk)`.
103 | 5. Calculate the authentication key `Ak` from
104 |    `BLAKE2b-256(0x02 || h || xk || epk || xpk)`.
105 | 6. Calculate the nonce `n` from
106 |    `BLAKE2b-192(epk || xpk)`.
107 | 7. Encrypt the plaintext data key (`pdk`) as
108 |    `XChaCha20(msg = pdk, nonce=n, key=Ek)`.
109 |    This will be the encrypted data key (`edk`).
110 | 8. Calculate the auth tag `t` as
111 |    `BLAKE2b-256(msg = h || epk || edk, key=Ak)`.
112 | 9. Return `t`, `epk`, and `edk`.
113 |
114 | #### V2/V4 Decryption
115 |
116 | Given a sender's ephemeral public key (`epk`), encrypted data key (`edk`),
117 | auth tag (`t`), and Ed25519 secret key (`sk`).
118 |
119 | 1. Verify that the header `h` is correct for the version of `sk`, and that `sk`
120 |    is an Ed25519 secret key.
121 | 2. Calculate the birationally-equivalent X25519 secret key (`xsk`) from `sk`.
122 |    The public key (`pk`) can be derived from either `xsk` or `sk`.
123 | 3. Calculate the shared secret `xk` from `crypto_scalarmult(xsk, epk)`.
124 | 4. Calculate the authentication key `Ak` from
125 |    `BLAKE2b-256(0x02 || h || xk || epk || pk)`.
126 | 5. Recalculate the auth tag `t2` as `BLAKE2b-256(msg = h || epk || edk, key=Ak)`.
127 | 6. Compare `t2` with `t`, using a constant-time compare function. If it does not
128 |    match, abort.
129 | 7. Calculate the encryption key `Ek` from `BLAKE2b-256(0x01 || h || xk || epk || pk)`.
130 | 8. Calculate the nonce `n` from `BLAKE2b-192(epk || xpk)`.
131 | 9. Decrypt the encrypted data key (`edk`) with `Ek` and `n`, using XChaCha20.
132 |    This will result in the plaintext data key (`pdk`).
133 | 10. Return `pdk`.
134 |
135 | ### Version 3
136 |
137 | Algorithms: ECDH over NIST P-384, SHA-384, AES-256-CTR, HMAC-SHA-384
138 |
139 | The constant `h` in the algorithms below will be set to `k3.seal.`
140 | (with the trailing period), and the unwrapped key MUST only be used for
141 | `v3.local.` PASETOs.
142 |
143 | #### V3 Encryption
144 |
145 | Given a plaintext data key (`pdk`), and a compressed P-384 public key (`pk`).
146 |
147 | 1. Generate a random, ephemeral P-384 keypair (`esk`, `epk`).
148 | 2. Calculate the shared secret `xk` from `ecdh_p384(esk, pk)`.
149 | 3. Calculate the encryption key `Ek` and nonce `n` from
150 |    `SHA384(0x01 || h || xk || epk || pk)`.
151 |    The leftmost 256 bits (32 bytes) will be `Ek`.
152 |    The remaining 128 bits (16 bytes) will be `n`.
153 | 4. Calculate the authentication key `Ak` from
154 |    `SHA384(0x02 || h || xk || epk || pk)`.
155 | 5. Encrypt the plaintext data key (`pdk`) as
156 |    `aes256ctr_encrypt(msg = pdk, nonce=n, key=Ek)`.
157 |    This will be the encrypted data key (`edk`).
158 | 6. Calculate the auth tag `t` as
159 |    `hmac_sha384(msg = h || epk || edk, key=Ak)`.
160 | 7. Return `t`, `epk`, and `edk`.
161 |
162 | #### V3 Decryption
163 |
164 | Given a sender's ephemeral public key (`epk`), encrypted data key (`edk`),
165 | auth tag (`t`), and P-384 secret key (`sk`).
166 |
167 | The public key (`pk`) will be a compressed public key calculate from `sk`.
168 |
169 | 1. Verify that the header `h`  is equal to `k3.seal.`, and that `sk`
170 |    is an ECDSA secret key.
171 | 2. Calculate the shared secret `xk` from `ecdh_p384(sk, epk)`.
172 | 3. Calculate the authentication key `Ak` from
173 |    `SHA384(0x02 || h || xk || epk || pk)`.
174 | 4. Recalculate the auth tag `t2` as
175 |    `hmac_sha384(msg = h || epk || edk, key=Ak)`.
176 | 5. Compare `t2` with `t`, using a constant-time compare function.
177 |    If it does not match, abort.
178 | 6. Calculate the encryption key `Ek` and nonce `n` from
179 |    `SHA384(0x01 || h || xk || epk || pk)`.
180 |    The leftmost 256 bits (32 bytes) will be `Ek`.
181 |    The remaining 128 bits (16 bytes) will be `n`.
182 | 7. Decrypt the encrypted data key (`edk`) with `Ek` and `n`, using AES-256-CTR.
183 |    This will result in the plaintext data key (`pdk`).
184 | 8. Return `pdk`.
185 |
186 | #### V3 Public Key Encoding
187 |
188 | Public keys **MUST** use [point compression](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.202.2977&rep=rep1&type=pdf)
189 | with PASERK.
190 |
191 | ```
192 | if Y is even:
193 |     [0x02] || [X]
194 | if Y is odd:
195 |     [0x03] || [X]
196 | ```
197 |


--------------------------------------------------------------------------------
/operations/README.md:
--------------------------------------------------------------------------------
 1 | # PASERK Operations
 2 |
 3 | | Operation        | Meaning                             |
 4 | |------------------|-------------------------------------|
 5 | | [ID](ID.md)      | Calculates a unique ID for a PASERK |
 6 | | [PBKW](PBKW.md)  | Password-Based Key Wrapping         |
 7 | | [PKE](PKE.md)    | Public-Key Encryption               |
 8 | | [Wrap](Wrap.md)* | Symmetric-key Wrapping              |
 9 |
10 | The Wrap* operation supports custom key-wrapping protocols.
11 | The definitions that have been registered in this document
12 | are collected in the [Wrap](Wrap) directory.
13 |
14 | The prefixes for each custom wrapping protocol are stored
15 | [here](Wrap.md#registered-prefixes).
16 |


--------------------------------------------------------------------------------
/operations/Wrap.md:
--------------------------------------------------------------------------------
 1 | # Key-Wrapping (with Symmetric-Key Cryptography)
 2 |
 3 | PASERK uses symmetric-key encryption to wrap PASETO keys.
 4 |
 5 | This is the most flexible mode in PASERK, as it offers a way to integrate
 6 | PASERK with multiple key management solutions.
 7 |
 8 | ## Related Types
 9 |
10 | * [`local-wrap`](../types/local-wrap.md) for `local` tokens
11 | * [`secret-wrap`](../types/secret-wrap.md) for `public` tokens
12 |
13 | Unlike other PASERKs, the `[data]` portion is not base64url-encoded when
14 | with these types.
15 |
16 | ## Data Format
17 |
18 | The `[data]` payload described in the respective type above will further
19 | be segmented as follows.
20 |
21 |     [prefix].[encrypted key]
22 |
23 | Where `[prefix]` is a distinct lowercase alphanumeric string that
24 | uniquely identifies the key-wrapping encryption protocol in use.
25 |
26 | ### Custom Key-Wrapping Protocol Guidelines
27 |
28 | PASERK Implementors **MAY** define custom wrapping protocols, but they **MUST**
29 | support the PASERK standard wrapping protocol (`pie`).
30 |
31 | Implementors **SHOULD** register their prefix in this document so that
32 | interoperability can be assured by other implementations.
33 |
34 | Implementations **MUST** authenticate the `version`, `type`, and `prefix`
35 | alongside their ciphertext. Implementors **MAY** authenticate additional
36 | data beyond what we require.
37 |
38 | Implementations **MUST** return an ASCII string.
39 |
40 | Implementations **SHOULD** Return a URL-safe string (i.e., using base64url
41 | from [RFC 4648](https://datatracker.ietf.org/doc/html/rfc4648)).
42 |
43 | ### Registered Prefixes
44 |
45 | | Prefix    | Key-Wrapping Protocol                            | Owner                                                   |
46 | |-----------|--------------------------------------------------|---------------------------------------------------------|
47 | | `aws-kms` | [AWS Key Management Service](Wrap/aws-kms.md)    | [Amazon Web Services](https://aws.amazon.com)           |
48 | | `pie`     | [PASERK standard wrapping protocol](Wrap/pie.md) | [Paragon Initiative Enterprises](https://paragonie.com) |
49 |


--------------------------------------------------------------------------------
/operations/Wrap/README.md:
--------------------------------------------------------------------------------
1 | # PASERK Custom Key-Wrapping Protocols
2 |
3 | The prefixes for each custom wrapping protocol are stored
4 | [here](../Wrap.md#registered-prefixes), along with who specified them.
5 |
6 | This directory contains the definitions for each prefix.
7 |


--------------------------------------------------------------------------------
/operations/Wrap/aws-kms.md:
--------------------------------------------------------------------------------
 1 | # Key-Wrapping: aws-kms
 2 |
 3 | This document describes a specific type of [key-wrapping](../Wrap.md)
 4 | supported by PASERK. See the parent document for more information.
 5 |
 6 | ## Algorithm Lucidity
 7 |
 8 | ### Encryption (Key Wrapping)
 9 |
10 | 1. The plaintext key (`ptk`) must be intended for the same PASERK/PASETO version
11 |    as the wrapping key (`wk`).
12 | 2. If the operation is `local-wrap`, an asymmetric key **MUST NOT** be provided,
13 |    and a symmetric key **MUST** be provided.
14 | 3. If the operation is `secret-wrap`, an asymmetric key **MUST** be provided,
15 |    and a symmetric key **MUST NOT** be provided.
16 |
17 | ### Decryption (Key Unwrapping)
18 |
19 | Before returning the decrypted plaintext key, the following checks **MUST** be performed.
20 |
21 | 1. If the operation is `local-wrap`, an asymmetric key **MUST NOT** be provided,
22 |    and a symmetric key **MUST** be provided.
23 |     * Additionally, the decrypted plaintext key **MUST** be only 32 bytes long.
24 | 2. If the operation is `secret-wrap`, an asymmetric key **MUST** be provided,
25 |    and a symmetric key **MUST NOT** be provided.
26 |     * Additionally, the decrypted plaintext key **MUST** be the appropriate size for
27 |       the secret key of a given version. (See table below.)
28 |
29 | ## PASERK Versions
30 |
31 | Key wrapping with AWS KMS only supports PASERK Version 3 and 4 and newer, rather than
32 | either of the two legacy protocol versions.
33 |
34 | ### Versions 3 and 4
35 |
36 | Algorithms: Whatever KMS does under-the-hood. We treat it as a black box.
37 |
38 | The header `h` will depend on the exact version and mode being used
39 | , as well as the prefix `aws-kms` (with a trailing period). It will be one of
40 | (`k3.local-wrap.aws-kms.`, `k3.secret-wrap.aws-kms.`, `k4.local-wrap.aws-kms.`,
41 | `k4.secret-wrap.aws-kms.`).
42 |
43 | #### KMS Encryption
44 |
45 | Given a plaintext key `ptk`, a KMS Key `kmskey`, and an optional KMS Encryption Context `ec`:
46 |
47 | 1. [Enforce Algorithm Lucidity](#algorithm-lucidity)
48 | 2. Call `Kms:Encrypt` with the following parameters, then set the result in `edk`:
49 |    * `KeyId` must be set to the ARN or KeyID for `kmskey`
50 |    * `Plaintext` = `ptk`
51 |    * `EncryptionContext` = `ec` with one additional field:
52 |      * `PaserkHeader` MUST be set to `h`
53 | 3. Return `base64url(edk)`
54 |
55 | ### KMS Decryption
56 |
57 | Given a base64url-encoded encrypted key `b`, a KMS Key `kmskey`, and an optional KMS Encryption Context `ec`:
58 |
59 | 1. [Enforce Algorithm Lucidity](#algorithm-lucidity)
60 | 2. Decode `b` from Base64url.
61 | 3. Call `Kms:Decrypt` with the following parameters, then set the result in `ptk`:
62 |     * `KeyId` must be set to the ARN or KeyID for `kmskey`
63 |     * `CiphertextBlob` = `b`
64 |     * `EncryptionContext` = `ec` with one additional field:
65 |         * `PaserkHeader` MUST be set to `h`
66 | 4. Return `ptk`
67 |
68 | ## Encryption Context
69 |
70 | Libraries are encouraged to allow users an optional interface to provide custom Encryption Context parameters.
71 |


--------------------------------------------------------------------------------
/operations/Wrap/pie.md:
--------------------------------------------------------------------------------
  1 | # Key-Wrapping: pie
  2 |
  3 | This document describes a specific type of [key-wrapping](../Wrap.md)
  4 | supported by PASERK. See the parent document for more information.
  5 |
  6 | ## Algorithm Lucidity
  7 |
  8 | ### Encryption (Key Wrapping)
  9 |
 10 | Before performing any key-wrapping, the following checks **MUST** be performed.
 11 |
 12 | 1. The plaintext key (`ptk`) must be intended for the same PASERK/PASETO version
 13 |    as the wrapping key (`wk`).
 14 | 2. If the operation is `local-wrap`, an asymmetric key **MUST NOT** be provided,
 15 |    and a symmetric key **MUST** be provided.
 16 | 3. If the operation is `secret-wrap`, an asymmetric key **MUST** be provided,
 17 |    and a symmetric key **MUST NOT** be provided.
 18 |
 19 | ### Decryption (Key Unwrapping)
 20 |
 21 | Before returning the decrypted plaintext key, the following checks **MUST** be performed.
 22 |
 23 | 1. If the operation is `local-wrap`, an asymmetric key **MUST NOT** be provided,
 24 |    and a symmetric key **MUST** be provided.
 25 |    * Additionally, the decrypted plaintext key **MUST** be only 32 bytes long.
 26 | 2. If the operation is `secret-wrap`, an asymmetric key **MUST** be provided,
 27 |    and a symmetric key **MUST NOT** be provided.
 28 |    * Additionally, the decrypted plaintext key **MUST** be the appropriate size for
 29 |      the secret key of a given version. (See table below.)
 30 |
 31 | | PASERK/PASETO Version | Secret Key Length Constraints |
 32 | |---|---|
 33 | | Version 1 | At least 1600 bytes. |
 34 | | Version 2 | 64 bytes |
 35 | | Version 3 | 48 bytes |
 36 | | Version 4 | 64 bytes |
 37 |
 38 | ## PASERK Versions
 39 |
 40 | ### Versions 1 and 3
 41 |
 42 | Algorithms: AES-256-CTR, HMAC-SHA384
 43 |
 44 | The header `h` will depend on the exact version and mode being used
 45 | , as well as the prefix `pie` (with a trailing period). It will be one of
 46 | (`k1.local-wrap.pie.`, `k1.secret-wrap.pie.`, `k3.local-wrap.pie.`,
 47 | `k3.secret-wrap.pie.`).
 48 |
 49 | #### V1/V3 Encryption
 50 |
 51 | Given a plaintext key `ptk` and wrapping key `wk`:
 52 |
 53 | 1. [Enforce Algorithm Lucidity](#algorithm-lucidity)
 54 | 2. Generate a 256 bit (32 bytes) random nonce, `n`.
 55 | 3. Derive the encryption key `Ek` and CTR nonce `n2` as:
 56 |    ```
 57 |    x = HMAC-SHA384(msg = 0x80 || n, key = wk)
 58 |    Ek = x[0:32]
 59 |    n2 = x[32:]
 60 |    ```
 61 | 4. Derive the authentication key `Ak` as:
 62 |    `Ak = HMAC-SHA384(msg = 0x81 || n, key = wk)`
 63 | 5. Encrypt the plaintext key `ptk` with `Ek` and `n2` to obtain the
 64 |    wrapped key `c`:
 65 |    `c = AES-256-CTR(msg = ptk, key = Ek, nonce = n2)`
 66 | 6. Calculate the authentication tag `t` as:
 67 |    `t = HMAC-SHA384(msg = h || n || c, key = Ak)`
 68 | 7. Return `base64url(t || n || c)`.
 69 |
 70 | #### V1/V3 Decryption
 71 |
 72 | Given a base64url-encoded encrypted key `b`, and the wrapping key `wk`:
 73 |
 74 | 1. Decode `b` from Base64url. The first 48 bytes of the decoded bytes will
 75 |    be the authentication tag `t`. The next 32 bytes will be the nonce `n`.
 76 |    The remaining bytes will be the wrapped key, `c`.
 77 | 2. Derive the authentication key `Ak` as:
 78 |    `Ak = HMAC-SHA384(msg = 0x81 || n, key = wk)`
 79 | 3. Recalculate the authentication tag `t2` as:
 80 |    `t2 = HMAC-SHA384(msg = h || n || c, key = Ak)`
 81 | 4. Compare `t` with `t2` in constant-time. If it doesn't match, abort.
 82 | 5. Derive the encryption key `Ek` and CTR nonce `n2` as:
 83 |    ```
 84 |    x = HMAC-SHA384(msg = 0x80 || n, key = wk)
 85 |    Ek = x[0:32]
 86 |    n2 = x[32:]
 87 |    ```
 88 | 6. Decrypt the wrapped key `c` with `Ek` and `n2` to obtain the
 89 |    plaintext key `ptk`:
 90 |    `ptk = AES-256-CTR(msg = c, key = Ek, nonce = n2)`
 91 | 7. Return `ptk`.
 92 |
 93 | ### Version 2 and 4
 94 |
 95 | Algorithms: XChaCha20, BLAKE2b
 96 |
 97 | The header `h` will depend on the exact version and mode being used
 98 | , as well as the prefix `pie` (with a trailing period). It will be one of
 99 | (`k2.local-wrap.pie.`, `k2.secret-wrap.pie.`, `k4.local-wrap.pie.`,
100 | `k4.secret-wrap.pie.`).
101 |
102 | #### V2/V4 Encryption
103 |
104 | Given a plaintext key `ptk` and wrapping key `wk`:
105 |
106 | 1. [Enforce Algorithm Lucidity](#algorithm-lucidity)
107 | 2. Generate a 256 bit (32 bytes) random nonce, `n`.
108 | 3. Derive the encryption key `Ek` and XChaCha nonce `n2` as:
109 |    ```
110 |    x = crypto_generichash(msg = 0x80 || n, key = wk, length = 56)
111 |    Ek = x[0:32]
112 |    n2 = x[32:]
113 |    ```
114 | 4. Derive the authentication key `Ak` as:
115 |    `Ak = crypto_generichash(msg = 0x81 || n, key = wk, length = 32)`
116 |    (This will return a 256-bit (32-byte) output.)
117 | 5. Encrypt the plaintext key `ptk` with `Ek` and `n2` to obtain the
118 |    wrapped key `c`:
119 |    `c = XChaCha20(msg = ptk, key = Ek, nonce = n2)`
120 | 6. Calculate the authentication tag `t` as:
121 |    `t = crypto_generichash(msg = h || n || c, key = Ak, length = 32)`
122 |    (This will return a 256-bit (32-byte) output.)
123 | 7. Return `base64url(t || n || c)`.
124 |
125 | #### V2/V4 Decryption
126 |
127 | Given a base64url-encoded encrypted key `b`, and the wrapping key `wk`:
128 |
129 | 1. Decode `b` from Base64url. The first 32 bytes of the decoded bytes will
130 |    be the authentication tag `t`. The next 32 bytes will be the nonce `n`.
131 |    The remaining bytes will be the wrapped key, `c`.
132 | 2. Derive the authentication key `Ak` as:
133 |    `Ak = crypto_generichash(msg = 0x81 || n, key = wk, length = 32)`
134 |    (This will return a 256-bit (32-byte) output.)
135 | 3. Recalculate the authentication tag `t2` as:
136 |    `t2 = crypto_generichash(msg = h || n || c, key = Ak, length = 32)`
137 |    (This will return a 256-bit (32-byte) output.)
138 | 4. Compare `t` with `t2` in constant-time. If it doesn't match, abort.
139 | 5. Derive the encryption key `Ek` and XChaCha nonce `n2` as:
140 |    ```
141 |    x = crypto_generichash(msg = 0x80 || n, key = wk, length = 56)
142 |    Ek = x[0:32]
143 |    n2 = x[32:]
144 |    ```
145 | 6. Decrypt the wrapped key `c` with `Ek` and `n2` to obtain the
146 |    plaintext key `ptk`:
147 |    `ptk = XChaCha20(msg = c, key = Ek, nonce = n2)`
148 | 7. [Enforce Algorithm Lucidity](#algorithm-lucidity)
149 | 8. Return `ptk`.
150 |


--------------------------------------------------------------------------------
/types/README.md:
--------------------------------------------------------------------------------
 1 | # PASERK Types
 2 |
 3 | | PASERK Type                           | Meaning                                                               | PASETO Compatibility | \[data\] Encoded? |
 4 | |---------------------------------------|-----------------------------------------------------------------------|----------------------|-------------------|
 5 | | [`lid`](lid.md)                 | Unique Identifier for a separate PASERK for `local` PASETOs.                | `local`              | Yes               |
 6 | | [`local`](local.md)             | Symmetric key for `local` tokens.                                           | `local`              | Yes               |
 7 | | [`seal`](seal.md)               | Symmetric key wrapped using asymmetric encryption.                          | `local`              | Yes               |
 8 | | [`local-wrap`](local-wrap.md)   | Symmetric key wrapped by another symmetric key.                             | `local`              | No                |
 9 | | [`local-pw`](local-pw.md)       | Symmetric key wrapped using password-based encryption.                      | `local`              | Yes               |
10 | | [`pid`](pid.md)                 | Unique Identifier for a separate PASERK for `public` PASETOs. (Public Key)  | `public`             | Yes               |
11 | | [`sid`](sid.md)                 | Unique Identifier for a separate PASERK for `public` PASETOs. (Secret Key)  | `public`             | Yes               |
12 | | [`public`](public.md)           | Public key for verifying `public` tokens.                                   | `public`             | Yes               |
13 | | [`secret`](secret.md)           | Secret key for signing `public` tokens.                                     | `public`             | Yes               |
14 | | [`secret-wrap`](secret-wrap.md) | Asymmetric secret key wrapped by another symmetric key.                     | `public`             | No                |
15 | | [`secret-pw`](secret-pw.md)     | Asymmetric secret key wrapped using password-based encryption.              | `public`             | Yes               |
16 |


--------------------------------------------------------------------------------
/types/lid.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: lid
 2 |
 3 | This kind of PASERK serves as a pointer to another PASERK, which is in
 4 | turn intended for `local` PASETOs.
 5 |
 6 | ## Format
 7 |
 8 |     k[version].lid.[data]
 9 |
10 | ## Operations
11 |
12 | See [ID](../operations/ID.md) for the algorithm used to derive local IDs.
13 |
14 | ## Examples
15 |
16 | ```
17 | k1.lid.Itkhw2RHx7sR6k4kqe31ekYRG1c8JfowN7h8jwdjb8sm
18 | ```
19 |
20 | ```
21 | k2.lid.keK316jg65NYOw6BbBHJHeQ7YWpyuHfNRxBVtY3kNoXG
22 | ```
23 |
24 | ```
25 | k3.lid.5GB-DfqfPOIMr0-y4IV8323vrjMt3mZMh_R3J3raH38l
26 | ```
27 |
28 | ```
29 | k4.lid.iVtYQDjr5gEijCSjJC3fQaJm7nCeQSeaty0Jixy8dbsk
30 | ```
31 |


--------------------------------------------------------------------------------
/types/local-pw.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: local-pw
 2 |
 3 | This PASERK is a key intended for `local` PASETOs, encrypted with a password.
 4 |
 5 | ## Format
 6 |
 7 |     k[version].local-pw.[data]
 8 |
 9 | Where `[data]` is the base64url-encoded payload, defined by each version.
10 |
11 | ### ID Serialization
12 |
13 | See [lid](lid.md).
14 |
15 | ## Operations
16 |
17 | See [PBKW](../operations/PBKW.md) for the algorithm used.
18 |
19 | ## PASERK Versions
20 |
21 | ### Versions 1 and 3
22 |
23 | | Starting Byte | Length | Definition                  |
24 | |---------------|--------|-----------------------------|
25 | | 0             | 32     | PBKDF2-SHA384 Salt (`salt`) |
26 | | 32            | 4      | Iteration count (`i`)       |
27 | | 36            | 16     | AES-CTR nonce (`n`)         |
28 | | 52            | 32     | Encrypted Data Key (`edk`)  |
29 | | 84            | 48     | Authentication tag (`t`)    |
30 |
31 | Total decoded length: `132 bytes`
32 |
33 | The iteration count (`i`) MUST be encoded as a 32-bit unsigned
34 | integer in big-endian byte order.
35 |
36 | ### Versions 2 and 4
37 |
38 | | Starting Byte | Length | Definition                    |
39 | |---------------|--------|-------------------------------|
40 | | 0             | 16     | Argon2id Salt (`salt`)        |
41 | | 16            | 8      | Argon2id Memory Cost (`mem`)  |
42 | | 24            | 4      | Argon2id Time Cost (`time`)   |
43 | | 28            | 4      | Argon2id Parallelism (`para`) |
44 | | 32            | 24     | XChaCha20 nonce (`n`)         |
45 | | 56            | 32     | Encrypted Data Key (`edk`)    |
46 | | 88            | 32     | Authentication tag (`t`)      |
47 |
48 | Total decoded length: `120 bytes`
49 |
50 | The Argon2id parameters (`mem`, `time`, `para`) MUST be encoded as
51 | unsigned integers in big-endian byte order. `mem` is 64-bit; the
52 | other parameters are 32-bit.
53 |
54 |
55 | ## Examples
56 |
57 | ```
58 | k1.local-pw.TikhC_wHVYtg1T2enmE6eR2KW9KeW_GqtbSU3HQ5kxkAAAPoq1eXdbqYsbIvE7YBFYFlLLgm7RWC4Ks2jLiNDZObdusSFRP45aJ_7Jkt9tzspqRS95ZCLAID3IkSTEg2WpLk7jKJMmtg4V0EK3SkEYC5AJOnGd3VFMlWi0qXQk9ULIvv
59 | ```
60 |
61 | ```
62 | k2.local-pw.w_h1_Ul9E041QJl8m9n7lAAAAAAEAAAAAAAAAgAAAAHslzni8NnrQ02dsjBknexAKjxpd-1BKxK-P1ZdSVJYiimOOAuaIu3jLyZSBDx1VNqzyH7MGaQe1YGqcEyT7GghPssmLA46BipTj3ji9xqRHO_7twcqCheD
63 | ```
64 |
65 | ```
66 | k3.local-pw.L4xcw6PFvnL9pJAuhaieAT8_Ko4YlQpx70uYSAa6WakAAAPorOFKZxUYOusjRpqLe7GShAQ2z7v38wL9tUvOP2ffCVmhznjyitHhEGjd1FywEFzIHuBypneYqVSej5J2ZB-8uSahQ2MW1fK5cV1ZMz3myN0CTNk9uxXSJvccR64low9P
67 | ```
68 |
69 | ```
70 | k4.local-pw._bru5tnkPSFXOtKhBTmW4gAAAAAEAAAAAAAAAgAAAAGKI3PyFS2vyQ9o5qowCR_GUXskLmdV1bjjc3vqnbwN7hVG1lAUCGjElTGIoH-K6lnkHnP4uaFBKWEtB3xFEGzAjzBSnl_JBmwLYK5jstjAV6LnJm_NOt0j
71 | ```
72 |


--------------------------------------------------------------------------------
/types/local-wrap.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: local-wrap
 2 |
 3 | This PASERK is a secret key intended for `local` PASETOs, encrypted with a
 4 | symmetric wrapping key.
 5 |
 6 | ## Format
 7 |
 8 |     k[version].local-wrap.[prefix].[encrypted key]
 9 |
10 | ### ID Serialization
11 |
12 | See [lid](lid.md).
13 |
14 | ## Operations
15 |
16 | See [Wrap](../operations/Wrap.md) for the wrapping algorithm.
17 |
18 |
19 | ## Examples
20 |
21 | ```
22 | k1.local-wrap.pie.aMF7_m3KXH8Rgoo4ow1FYEThHAhaNR1deM9SbRRnHR9-ao5qckA-b0sltysyHG8jPor1oVTCiTxS0Bx8Rt6Dnxy9rMGEYwrqfQfrXJLNnvh6O19Id0TwJ-vMnagj3xJeGEZMSO8K9JaZrgh6sBAWng
23 | ```
24 |
25 | ```
26 | k2.local-wrap.pie.Sjnrhha_9ZO77xOIrkL6wioU4cHiIxqS2dLYj6L2dnxPSSBeTN5yUjLbNyku35ct550gQeaIdDaBTrNBwEohbrM_FIG6zit_D4ba25xU5jjUtNg6xN7wD0bRT2ucHF8W
27 | ```
28 |
29 | ```
30 | k3.local-wrap.pie.bkbHfW4bBJQ8jcPfLOYxUrg4SkKRHbsywYZwRvxUGFt1je2idZxlFr8sbkB6jTZ6hnrVlI25G2hqZtfdQyFIUcrRAiBrCWNPP1b3afdD9_YxsAXoKEA3X4AZhReuvHCzuPqXNCtrvJtpupGZn-PLFQ
31 | ```
32 |
33 | ```
34 | k4.local-wrap.pie.pu-fBxwoXrICYjeumh77cJ6la4svNGrjshQ7W_ygiJzm80LQBB1e6yqODDq6HO8c0UNY_dzLkzZC62Z81eleoIYUChwymEx23KbTQDinWaOQoKkRantNkrD5o0eo8iCS
35 | ```
36 |


--------------------------------------------------------------------------------
/types/local.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: local
 2 |
 3 | This is a plaintext serialization of a symmetric key for PASETO `local` tokens.
 4 |
 5 | No operations are necessary; just encode as raw bytes.
 6 |
 7 | ## Format
 8 |
 9 |     k[version].local.[data]
10 |
11 | Where `[data]` is the base64url-encoded raw bytes of the symmetric key.
12 |
13 | ### ID Serialization
14 |
15 | See [lid](lid.md).
16 |
17 | ## Examples
18 |
19 | ```
20 | k1.local.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo8
21 | ```
22 |
23 | ```
24 | k2.local.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo8
25 | ```
26 |
27 | ```
28 | k3.local.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo8
29 | ```
30 |
31 | ```
32 | k4.local.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo8
33 | ```
34 |


--------------------------------------------------------------------------------
/types/pid.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: pid
 2 |
 3 | This kind of PASERK serves as a pointer to another PASERK, which is in
 4 | turn intended for `public` PASETOs.
 5 |
 6 | This is for serializing **public keys** in a keypair.
 7 |
 8 | ## Format
 9 |
10 |     k[version].pid.[data]
11 |
12 | ## Calculations
13 |
14 | See [ID](../operations/ID.md) for the algorithm.
15 |
16 | ## Examples
17 |
18 | ```
19 | k1.pid.oxQIZk0yciX7cLRZ3C0Psdoj-RUqmVHrlnIYGNma6xy8
20 | ```
21 |
22 | ```
23 | k2.pid.4zgEvkSaB64DlcV9ChYZPEqBATLwUsB5zCrlpEOk2wD9
24 | ```
25 |
26 | ```
27 | k3.pid.gnwg7IkzZyQF9wJgLLT0OpbdMT7BYmdQoG2u-xXpeeHz
28 | ```
29 |
30 | ```
31 | k4.pid.9ShR3xc8-qVJ_di0tc9nx0IDIqbatdeM2mqLFBJsKRHs
32 | ```
33 |


--------------------------------------------------------------------------------
/types/public.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: public
 2 |
 3 | This is a plaintext serialization of a public key for PASETO `public` tokens.
 4 |
 5 | ## Format
 6 |
 7 |     k[version].public.[data]
 8 |
 9 | ### ID Serialization
10 |
11 | See [pid](pid.md).
12 |
13 | ## PASERK Versions
14 |
15 | ### Version 1
16 |
17 | The `[data]` portion will be DER ASN.1 PKCS#1 RSA Public Key
18 | **WITHOUT** PEM encoding (base64 and the `-----` prefixes/suffixes).
19 |
20 | ### Versions 2 and 4
21 |
22 | The `[data]` portion will be the Ed25519 public key as raw bytes.
23 |
24 | ### Version 3
25 |
26 | The `[data]` portion will be the compressed P-384 public key, as specified in
27 | [section 4.3.6, step 2.2 of this document](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.202.2977&rep=rep1&type=pdf).
28 |
29 | ```
30 | if Y is even:
31 |     [0x02] || [X]
32 | if Y is odd:
33 |     [0x03] || [X]
34 | ```
35 |
36 | Here, the X coordinate is expressed in big endian byte order.
37 |
38 | ## Examples
39 |
40 | ```
41 | k1.public.MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyaTgTt53ph3p5GHgwoGWwz5hRfWXSQA08NCOwe0FEgALWos9GCjNFCd723nCHxBtN1qd74MSh_uN88JPIbwxKheDp4kxo4YMN5trPaF0e9G6Bj1N02HnanxFLW-gmLbgYO_SZYfWF_M8yLBcu5Y1Ot0ZxDDDXS9wIQTtBE0ne3YbxgZJAZTU5XqyQ1DxdzYyC5lF6yBaR5UQtCYTnXAApVRuUI2Sd6L1E2vl9bSBumZ5IpNxkRnAwIMjeTJB_0AIELh0mE5vwdihOCbdV6alUyhKC1-1w_FW6HWcp_JG1kKC8DPIidZ78Bbqv9YFzkAbNni5eSBOsXVBKG78Zsc8owIDAQAB
42 | ```
43 |
44 | ```
45 | k2.public.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo8
46 | ```
47 |
48 | ```
49 | k3.public.AnBxcnN0dXZ3eHl6e3x9fn-AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2enw
50 | ```
51 |
52 | ```
53 | k4.public.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo8
54 | ```
55 |


--------------------------------------------------------------------------------
/types/seal.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: seal
 2 |
 3 | This PASERK is a secret key intended for `local` PASETOs, encrypted with an
 4 | asymmetric wrapping key.
 5 |
 6 | ## Format
 7 |
 8 |     k[version].seal.[data]
 9 |
10 | ### ID Serialization
11 |
12 | See [lid](lid.md).
13 |
14 | ## Operations
15 |
16 | See [PKE](../operations/PKE.md) for the algorithms used to perform
17 | asymmetric encryption.
18 |
19 | When serializing, `[data]` will be the base64url-encoded payload consisting
20 | of the return values of the appropriate Encryption operation from the
21 | [PKE](../operations/PKE.md) document, for this PASERK version.
22 | These values will be concatenated together in the order the PKE document specifies
23 | prior to base64url encoding.
24 |
25 | ## Examples
26 |
27 | ```
28 | k1.seal.QmXSEH_ei6jX3xvcZ5_l4k53mBTgJSRHWS07MB56tX0hBUqKE-ur-SdjRn68DF_j9BbUSif5kqAn4h7ozfW1IRr4tp26_gVdSN9wUcCMVFpc7kF_unOd8dJlqKuxAxy8pfVRtN5no12JKogWU9EBE1y8iv6k1CDetlU8htQsBhvpcNigBhFooNt8J2UZrNppDSlzO-bqJcz7gPFpqdp31wwCi9PIoaUG52GHTRrm600p6FftQ9V2XdnA5gL0TZQhRG3EstYR9s6p-Irrs7BcqH5QpC0ZRLcnsJHMkSvX79g7fkiJeEHbLRTjE0xUT8sUk6fxgSNJws8XDsBU-4p74OKW3GyZmtbxwhHN6hO4OJHRtV3MoLRJMDUVYCVfDVkEMYXd9kOq9_rRgeP_cCnHhbLncIpEUUfvLB_8OAesU6h88ulKDdsyIs2a7HCrvjfKwni4iz8yAabUf7JTzieoX9zRsYe52i6vmujSgiuiwKS_EbdPTKNiPu308QHfu_bubXYkRXmU6ieziqU1f4FAklxGNK9sZpK_uEYIUrhiT6uqIJmkMU410XFnVwkebd6OGXFoGvvIyaq0iPaF---fHXyCnmI9fyjV0kHy57I18pbDY-ujMUCnjZ-yYYmk2DyhYPURq50yNVptIjx7B8mU660KPWkACO1NUQhIdACDkHseNb7mER71l64A0Hmu9PZB4VHBH4NBhtdvll2vIVcLPk-BdDa1PziJy6QZweIel-IufvLl1awLu67d2D8DJw25NAPuCsdrfZMMqhe02nAmGg
29 | ```
30 |
31 | ```
32 | k2.seal.rJZgCJrVrUFRPehByeSoO1wAUxG072_yZcyHKARrNU_ShbDBbW6xKtQl7se_PZZ9z1z484vcWmp0iTWGcVplCj2oZClme5JBCQeYSqc2lDev3xTFgOiRxX71gnnxSBkO
33 | ```
34 |
35 | ```
36 | k3.seal.utQTzb7zGDXC-apbXsIby7yFZxoFFzUb40J1-zszMIjNkf3WLwEmqj9fuQwA8IKfAyWOvtZAxT4--kzAkYEKk492x2bypDps_a1Gsp-L9we22lWEkNVpqA-DWr9uoTRhSWRh87hFNla5ZzrpqMgeP1UOSDGKuRs62gZxFhCzsLka
37 | ```
38 |
39 | ```
40 | k4.seal.3-VOL4pX5b7eV3uMhYHfOhJNN77YyYtd7wYXrH9rRucKNmq0aO-6AWIFU4xOXUCBk0mzBZeWAPAKrvejqixqeRXm-MQXt8yFGHmM1RzpdJw80nabbyDIsNCpBwltU-uj
41 | ```
42 |


--------------------------------------------------------------------------------
/types/secret-pw.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: secret-pw
 2 |
 3 | This PASERK is a secret key intended for `public` PASETOs, encrypted with a password.
 4 |
 5 | ## Format
 6 |
 7 |     k[version].secret-pw.[data]
 8 |
 9 | Where `[data]` is the base64url-encoded payload, defined by each version.
10 |
11 | ### ID Serialization
12 |
13 | See [sid](sid.md).
14 |
15 | ## Operations
16 |
17 | See [PBKW](../operations/PBKW.md) for the algorithm used.
18 |
19 | ## PASERK Versions
20 |
21 | ### Version 1
22 |
23 | See [V1/V3 Encryption in the PBKW document](../operations/PBKW.md#v1v3-encryption)
24 | for how these values are derived.
25 |
26 | | Starting Byte | Length | Definition                  |
27 | |---------------|--------|-----------------------------|
28 | | 0             | 32     | PBKDF2-SHA384 Salt (`salt`) |
29 | | 32            | 4      | Iteration count (`i`)       |
30 | | 36            | 16     | AES-CTR nonce (`n`)         |
31 | | 52            | varies | Encrypted Data Key (`edk`)  |
32 | | varies        | 48     | Authentication tag (`t`)    |
33 |
34 | Total decoded length: 100 bytes longer than your PEM-encoded RSA private key.
35 |
36 | A typical RSA private key, when PEM-encoded, is about 1674 bytes long.
37 | Therefore, you can estimate the data payload for a `k1.secret-pw` PASERK to be
38 | `1774` bytes. There **MAY** be variability, so parsers should permit some flex.
39 |
40 | The iteration count (`i`) MUST be encoded as a 32-bit unsigned
41 | integer in big-endian byte order.
42 |
43 | ### Versions 2 and 4
44 |
45 | See [V2/V4 Encryption in the PBKW document](../operations/PBKW.md#v2v4-encryption)
46 | for how these values are derived.
47 |
48 | | Starting Byte | Length | Definition                    |
49 | |---------------|--------|-------------------------------|
50 | | 0             | 16     | Argon2id Salt (`salt`)        |
51 | | 16            | 8      | Argon2id Memory Cost (`mem`)  |
52 | | 24            | 4      | Argon2id Time Cost (`time`)   |
53 | | 28            | 4      | Argon2id Parallelism (`para`) |
54 | | 32            | 24     | XChaCha20 nonce (`n`)         |
55 | | 56            | 64     | Encrypted Secret Key (`esk`)  |
56 | | 120           | 32     | Authentication tag (`t`)      |
57 |
58 | Total decoded length: `152 bytes`
59 |
60 | The Argon2id parameters (`mem`, `time`, `para`) MUST be encoded as
61 | unsigned integers in big-endian byte order. `mem` is 64-bit; the
62 | other parameters are 32-bit.
63 |
64 | ### Version 3
65 |
66 | See [V1/V3 Encryption in the PBKW document](../operations/PBKW.md#v1v3-encryption)
67 | for how these values are derived.
68 |
69 | | Starting Byte | Length | Definition                   |
70 | |---------------|--------|------------------------------|
71 | | 0             | 32     | PBKDF2-SHA384 Salt (`salt`)  |
72 | | 32            | 4      | Iteration count (`i`)        |
73 | | 36            | 16     | AES-CTR nonce (`n`)          |
74 | | 52            | 48     | Encrypted Secret Key (`esk`) |
75 | | 100           | 48     | Authentication tag (`t`)     |
76 |
77 | Total decoded length: `148 bytes`
78 |
79 | The iteration count (`i`) MUST be encoded as a 32-bit unsigned
80 | integer in big-endian byte order.
81 |
82 | ## Examples
83 |
84 | ```
85 | k1.secret-pw.0DZQcctMMWQO_EKykDaXl3LBtEfO5fZOQNio6wgwiQEAAAPoH_FRjm1ayzKKQNxc0T_ph1pHj0cPX8uyDbJqcHFbNbNQyLGrNgHontvyshbUfiBUoAbKhlit9xYl_vcFUyw6B0YUn5hO8BMWSeGRXT3p9070fmPUlB5WBrZVREz5kS8_oEPlcRPqX8dXMtUNDoOo5ag_zXQ_CXgDzkfF9IVSMyGgSWYiwPgTXrmdXPwzAcqez73uAaNNPYu7KmM-cnmwSErW_IckQ36k7vcvtdg048ywr0sGcf4yZ_BvQETyyrikTYrFaCT1mviyKjBMnLNfG6Ga7hiFLJai28B9z1G8jyvArtQGrfZBv5ujlTvW8RfgkK5alQIH3RUSpFXUWH4IJzfkywqp6UzWnqLw_agvepV2YaEcH3XyAy8w5wzMOumKc9veeGVjjgH0703euemehZm-l8EJT-k7H18geABOJjNOQupOEPMQ0E4ZYOu5XjgEEFFAaFLoJyGdi5bqnvyR_KGLdEtgzsqNYi2DEN2UwiJdQU6rCNoHHAuWnrqqH9YGhSI7CQm0TVLtICzJuR-xLMfsZ7VwPSqOj03VKt2ufqlSPc4o7VrddIjWaXDstk8fmrbn_Q1mDp3a-YmwGZvR46kKoNmmACgRw7xWZZUSYezlvOmtbSySLjDJLO-BrqHIAHoOgEpr5yQNCTaQ3qcPAOZ6dkDb0o7BHKb0lAs1opWOIE6niP2E1uOJ7gTmwUsN7tbBNvH7SRhilikmXqQPAHBueqIj2MdrcAfpempewXo0wdx2lUx-dhGy_p1B4X_3tDitbgE4SvOgH8tWD4WVRRr1tHS3TjsI8hQHP7iLoEIxMFwkKljSleNNAJlTowjnfrhXPKmgTEc-w64Wpj32jU0mGQcBFSEwZ_1oGKbM6HcxIKkDRg1Wcd3irkYWmzdlQy4pXgQoGEgGRImoev7l1OFz2cJsWNr-DEzuiRnooSQa2chR7HVjhsuGfPonomrKC9VLEjwI5GC1GisjmMXoHK1DWmw31hMVcFTKu07O2VhSBL3ySdkJ__6HMAzMJ3dmcwaQjuiQ_plM7nVI4BA9ZdR3Ke7bNYsoWjPcs6P7XpFEGpeF6tDql7B-mD00vsq_9PL2GQ4VqHdXTlhvM3oRv39dayxegr9I0HhHfHx99cd5YYu2oEP5OaHiqgUdckkJPgqwe7fuMrOsvMlmniWsNESQZMOHhmsPSg0WzqxXvf72aE2yLNV9FivC3GzU_QQc8mgod1ssWSDpqEXgxffZKi7NmiQehIuBr34zQHgqJJacoJ7SMeUYAz_upsfp32FXPu0T7rWj7g7QsPG1oNSVa9rZG8l36ddSKLZTY-6QmRfBumU1rfBdoNg5M1-iZu3skB1Ly_8JbU6nw0aQZvAeJfvx3_-94-92XCI_v9ZSmTXEBugYfs5SpmkCx6J0QL7Url5QYqd97jNeQMPg76f99Wix_wHtAGFwyW0lklwHYYuMWHJS3Giao5osDiFynwbTVZTnDyJZwCBR3T3qQt7aauTvRS7c-Q6MV47yU9qP_KPoeL6fv4S5pRXprAtqjwANLrjiGVG3w014eS5UDuVHNe8qqg2qizILbiyxFIK_DsFWq0ZYkifUlfqg_pi6L55XuRC30IWGp1JePYytHr_5JKay5nydyQr-D027W7vin5UK4f2-Mls_q0_99_fjRC26qnWSTv9ainsPCTd-ijaWnKzD20cq-edWRPnEjIfjyOc3iDZmKKqXAxgZ6U5D4IKRqiQklx4a3QnAjJF2qmQy3NEW7GVq9V3On4rViQugit3MhMfRp5kLxRigiI0XWp6FqZ8FuCO11rB2irYakAO8mNUEZ6ghtt2diiNs2lntzRj26Ji-u5J7qSP6TIgRl1YyAcZdLVNTckCCfl_u0jPPbdsk2yE46NaPA8Dx901Ky2WndVnVkA6y5_H-gu3FV3Dm954jWVwohHlxDmYQ9asZdQlZQPf4nb3D7m4J5435L9A0F4MGDrS7gnc-l7TXb26efIzcC9eXYlko9E9xkPuDEEcXnD89G5XIBfaV_URoq9uQ3K95Df5AcZRlmZg87JzJP5jGz6sjbxEWrqX2AjZi30FpRSK4VmcG8PLavaGGjUiVSgR2X_lcIkT5TGe_UioGG5SghTgZCHZGZNOnV4vzWztCrKVP32qnxsl6qJ9r9H4UxCaF4ELYJ6rrYB3FY6Jq5EXvz5_qs4IeaqpIFKtLtt2RhtBNR6M-JXBXJ1Wx8wrNqWa7xdO4eH0_342vy-dWZb2LCsMtjlZ3lPdrctrvijwA4m6f3cqzKW31I1g3YaCKRzTopmxDrCxvi_nXJTZfDf9aySvF6DIYjg
86 | ```
87 |
88 | ```
89 | k2.secret-pw.4E0InkfeEjv3iWwyvfWl8AAAAAAEAAAAAAAAAgAAAAFSlCXdviXQomKxRdLuDJtSoFKWW5Qnz0kATDg_8la44lKegKQNJlV0ZBHckGohtQUaS0KqmIvJH2WtAM9dweKnlisHQYUiQfyS4-VyFBmhYaAhOFiRJ5__-vZRDpM08DMt_OP94_eeSWHwLcqX2gzpFU9CHy5m5No
90 | ```
91 |
92 | ```
93 | k3.secret-pw.mXsR2qVqmcDxmSWeQCnCwNeIxe5RDQ3ehnQvdXFj-YgAAAPoFI8eRXCL8PFpVW_CWOvGHnvMPy0BkMlKF1AtmBYGKold9i-ALC2oflkemYdbncrHbiKGd8zfjTQu2tTo2ayOMHybk_-hhopwJ2IUallYfLfUzPuqvtOQfVxXLtUBPnmR75dhRiPDgzdIO1OMbqa3Z1LDevvzbrcPyhHqmJSZioeJ7j1Mu8DJOvrIK0pWHmjDq_eg4YFnaOgz7I3Tkxx89A
94 | ```
95 |
96 | ```
97 | k4.secret-pw.dkyi7kfzHnVTCqTq1AvLyQAAAAAQAAAAAAAAAwAAAAFWNLgB_yXNkk4W9NiXgeTkNnB3Vjuk_-TFQ-vMUxNX-Ha3k42djov9rHVykMHkrSGUemYFwpot9uNHnXOWtJCVIwdYAwZmt_uRSJ2rRTElanT6mWXojuBUy2k1lxD-iZ10pVPkJ-Kvv_SLEhLQ8RS7wqFW8RfFGyw
98 | ```
99 |


--------------------------------------------------------------------------------
/types/secret-wrap.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: secret-wrap
 2 |
 3 | This PASERK is a secret key intended for `public` PASETOs, encrypted with a
 4 | symmetric wrapping key.
 5 |
 6 | ## Format
 7 |
 8 |     k[version].secret-wrap.[prefix].[encrypted key]
 9 |
10 | ### ID Serialization
11 |
12 | See [sid](sid.md).
13 |
14 | ## Operations
15 |
16 | See [Wrap](../operations/Wrap.md) for the wrapping algorithm.
17 |
18 | ## Examples
19 |
20 | ```
21 | k1.secret-wrap.pie.mo9sQnMrB7F532sEJjoz5jxXKeaHnKK2izvn9SF3Xs_WjtTZ-BEMF4Gy6uXEPfg2Kd3hIEJfU7YnWfMszrpVhgty_SKzxTe3HbV9dGMZ8L513y6RYPpbIxRo8S3ahe3tFos1f8QYE5J-0OM1TfDrtTto-GapJuBnfT9NKXUKURSYchwAGjFH6oDO0kzSwk_4vz0haPb3KQk0FO2xKE1Z2WLl1Gz7pf9P_M7N6sij1UaA5r02kEt2T7OyPbDPppR7OqrmMNbLeKeyTPzeKfg5H19xdVu2v6IBKw8Bv-khA49O6-uYhMPv_bOOY7mzk914ewOkf2pdfOAdRM37SryCpFl-PDl7xYrJSkKE62sOB9O_4DaHd0wXBdWFhyI-SgML7MWO_1ohvIkHiz7LRI5isje7_4a7D0PLTy_e7B0k5n4ejC8SRExQGEExaY0hYM96O0g4Tu-hfdWzY0gvVjaeAoJgOsV6Nju-NQyJEbZAdKgQkQ_806ge90X_LH_v4husRxxXkYxn8_ShvBh6aa9JgBNR6cni96MDqviJOPwevbrv92dc2QRUBow8I94AF8F4TAKMEA5VtnIupXT_hNCgviVHvFjrjd06vcCK-O7vrQVeTg8UXvU9TNtEz0-vrFlczn9-Vo_fx7rHTXAk83aV4xY2XU1fvbzD6zClPd6_T7LXk3oiWLc3PNZGCwTR6lvXBZZtLhZCCY6OXE_LEXQMX4wv5XN_DmRRrA_TxxhW2z3-I1LQJ0eApLHEHgevCrXmG3oPdADwoyH8wXLEnyOiN7c0XqfsnR_UHUtqyFV35eMwto0PGAQmOjHCW9zrvWpykZ216bXk8M0BQljsdsJ8Oyd9yyGY5BancCK_A3Es-mjt30YyShTd1UsVXrTMpLbwMRCaFNP3C4FIkxlYh_PK1q7sijI3sudcVv7JdsonzhzIViGmBboiICsf2ztdTeqmaNDL0zuv6mDrrhjKNgZnI4rNUjHEj_BarBZT-If9l3WVUVxZDdUE2F_zLll771Cw7sfr4w5eGQYkQ9fz0czUdedEXLkMqC3O7nezIO_nBHVP4fgLh7179RDrdFQGyUC7rFTYO7Ul3M6YlFeMoocN-_XiVEvNv7sdc4CeKaEl_kWHsoGjbRa6kT9mcZI-g0yqio4SPsQT8_VZ3fLtbQQ-mIC2998fcIOpcvf8o0unY4_wtxTu5I2hiaF0gi0SdH1sjbjpJBlZe1732maCuz5bCppXqO5T-lTOyLogYXGSz4RI8rz13IkF_jWDPDqnJf1hm6yUpjmeY72JpJLvBJ_l-_Rqv5-1130NwECPA9a3AMwMYHFX32r41PM5bf1pQAoYU6loewjMFxjDVa44lQnPfgW7Z2II_F1m8QKNgob5l5UMqDPymqwSHw0Noxbq2fsqchn-IevfhK8Un93qVLwPrAV2uuNDwuOirCJ-AzUnB2m1daJKMU9B6uF1Ma050j0DRJplunp-f9mThes9AfjJW4jfnnSXmP7VchjB4YnD6VbBkWvzlqYhyzZBfpdUpwYIqe0WlWdrKWgKDy9nqx6UlYiJv0BS8v-tv9YVXGEDiwYBjTv4jzypTayQCjillLFC4lUwoQ0beHEV2LbiD8KC_X6PGSajKQXbK9CLv3UKf8WHV39XCzTSG1SipOoMCMhooCuiX53GcOCNN-E9n-Fbr_3giH1_pJt1YVyNd8LPIDEBLAxWbZp4ajuaYv5Jnq8KkuwM--zY0fm87tPMU4NBKhGIosjkBiBe_sW1vfs5ISjXN2a291h9Ogj5gbQWbJ6iyjrVPJQPQAWP1sGyZNc2U7cdYo9OVD0-r5DA6hRYouYJjkUMsp42dB3A1BbABkbLG7Y11wzgpAoONP0pBs-KUebkvlH_I8bAzGfhm3299RGvIVtvOCy_YKlm99oCz9QKyDluOby4rvNJfXPy9P5x0KavrWWWG0qT-bUd2e7R7NpaIO3DAou2qrzJLnkDmuLnQyTN4ZPP5wdISj6SUv1SCV2fZG57s3FYn-AOmhz8xcOGXKO58L7WEke6lgLZt-PEWMfaLoJbyO-Ba5vxGMl9vzpSikkkJXYkVpJCvLTZcrJS1e0hG3RXQtEOWrRiN_eRm6CzU-79OgWXShBAb1RFuECR0Czgmr6n_rN3-Ng-AY1-F89d0U5cP70F6QguUlcQfpn-MOZnV5sruP0QNmfckaRt2-k8eHW5pTO-PEgw2i_-j22lngKGb8CaWQ4WPFlXu_dkrcQmYcRBgnCLkynpKaSqsc04PW-pMP93kX-_H9zZCsN4Jn327xyPrtazZAxhulh1aoOIE7ZwZBVb2PQQcDHf7KmrOUbkvIY
22 | ```
23 |
24 | ```
25 | k2.secret-wrap.pie.NiHH3mKCBxzqWO3KIlnTa8TMO7jgyUOzIo_8tkt4VfLKtTmksuSADDO-dOQoiC6Zcm0uUvik16n5owtZJ-3STFV7iV8WYb89_5jR2-EqfDpW_Ervu3OuyDtoT4XAPhJ_JQdnChbfijwbXHB_47r-4TsRsuTxDPgSuV1oXwGDf_M
26 | ```
27 |
28 | ```
29 | k3.secret-wrap.pie.nO_HBjjcuSfJiMpOplm0Rcn7vl760L8NXS1xIFxv47-FlogIxCcSiDEhlIeKd6pU023wCc8RPTyW865Z7GtmdxXDPsXwtu8eU2BntsZebM-zaEimeDvDd33myP7xg8P8RthH1glFFElMcfVa0SglYcg5Y2dAKvb8b9tlvLShPiI
30 | ```
31 |
32 | ```
33 | k4.secret-wrap.pie.jLhVAJYWaOcKiFvnKv6kFEQxSGV9BQuW1Qt4jRwr6yHiNeQf2h1GQ0czBJZpveX5T0R0YZv2OEenf8uyLqwamDJUbtS-GdYp_TXT1OJCwGJb2UpEHvcSOciH2PVCEiTrLM9n_mAI4SWXDfw4xYenmINDhi8EiPaPKvsOU64YBvY
34 | ```
35 |


--------------------------------------------------------------------------------
/types/secret.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: secret
 2 |
 3 | This is a plaintext serialization of a secret key for PASETO `public` tokens.
 4 |
 5 | ## Format
 6 |
 7 |     k[version].secret.[data]
 8 |
 9 | ### ID Serialization
10 |
11 | See [sid](sid.md).
12 |
13 | ### Version 1
14 |
15 | The `[data]` portion will be DER ASN.1 PKCS#1 RSA Private Key,
16 | **WITHOUT** PEM encoding (base64 and the `-----` prefixes/suffixes).
17 |
18 | ### Versions 2 and 4
19 |
20 | The `[data]` portion will be the Ed25519 secret key as raw bytes.
21 |
22 | Here, Ed25519 secret key means the clamped 32-byte seed followed by the 32-byte public key,
23 | as used in the NaCl and libsodium APIs, rather than just the clamped 32-byte seed.
24 |
25 | ### Version 3
26 |
27 | The `[data]` portion will be the P-384 secret key as raw bytes.
28 |
29 | ## Examples
30 |
31 | ```
32 | k1.secret.MIIEowIBAAKCAQEAyaTgTt53ph3p5GHgwoGWwz5hRfWXSQA08NCOwe0FEgALWos9GCjNFCd723nCHxBtN1qd74MSh_uN88JPIbwxKheDp4kxo4YMN5trPaF0e9G6Bj1N02HnanxFLW-gmLbgYO_SZYfWF_M8yLBcu5Y1Ot0ZxDDDXS9wIQTtBE0ne3YbxgZJAZTU5XqyQ1DxdzYyC5lF6yBaR5UQtCYTnXAApVRuUI2Sd6L1E2vl9bSBumZ5IpNxkRnAwIMjeTJB_0AIELh0mE5vwdihOCbdV6alUyhKC1-1w_FW6HWcp_JG1kKC8DPIidZ78Bbqv9YFzkAbNni5eSBOsXVBKG78Zsc8owIDAQABAoIBAF22jLDa34yKdns3qfd7to-C3D5hRzAcMn6Azvf9qc-VybEI6RnjTHxDZWK5EajSP4_sQ15e8ivUk0JoWdJ53feL-hnQvwsab28gghSghrxM2kGwGA1XgO-SVawqJt8SjvE-Q-__01ZKK0OyA0cDJjX3L9RoPUN_moMeAPFw0hqkFEhm72GSVCEY1eY-cOXmL3icxnsnlUD__SS9q33RxF2y5oiW1edqcRqhW_7L1yYMbxHFUcxWh8WUwjn1AAhoCOUzF8ZB-0X_PPh-1nYoq6xwqL0ZKDwrQ8SDhW_rNDLeO9gic5rl7EetRQRbFvsZ40AdsX2wU-lWFUkB42AjuoECgYEA5z_CXqDFfZ8MXCPAOeui8y5HNDtu30aR-HOXsBDnRI8huXsGND04FfmXR7nkghr08fFVDmE4PeKUk810YJb-IAJo8wrOZ0682n6yEMO58omqKin-iIUVrPXLSLo5CChrqw2J4vgzolzPw3N5I8FJdLomb9FkrV84H-IviPIylyECgYEA3znwAG29QX6ATEfFpGVOcogorHCntd4niaWCq5ne5sFL-EwLeVc1zD9yj1axcDelICDZxCZynU7kDnrQcFkT0bjH_gC8Jk3v7XT9l1UDDqC1b7rm_X5wFIZ_rmNa1rVZhL1o_tKx5tvM2syJ1q95v7NdygFIEIW-qbIKbc6Wz0MCgYBsUZdQD-qx_xAhELX364I2epTryHMUrs-tGygQVrqdiJX5dcDgM1TUJkdQV6jLsKjPs4Vt6OgZRMrnuLMsk02R3M8gGQ25ok4f4nyyEZxGGWnVujn55KzUiYWhGWmhgp18UCkoYa59_Q9ss-gocV9hB9j9Q43vD80QUjiF4z0DQQKBgC7XQX1VibkMim93QAnXGDcAS0ij-w02qKVBjcHkb9mMBhz8GAxGOIu7ZJafYmxhwMyVGB0I1FQeEczYCJUKnBYN6Clsjg6bnBT_z5bJx_Jx1qCzX3Uh6vLjpjc5sf4L39Tyye1u2NXQmZPwB5x9BdcsFConSq_s4K1LJtUT3KFxAoGBANGcQ8nObi3m4wROyKrkCWcWxFFMnpwxv0pW727Hn9wuaOs4UbesCnwmpcMTfzGUDuzYXCtAq2pJl64HG6wsdkWmjBTJEpm6b9ibOBN3qFV2zQ0HyyKlMWxIuVSj9gOo61hF7UH9XB6R4HRdlpBOuIbgAWZ46dkj9_HM9ovdP0Iy
33 | ```
34 |
35 | ```
36 | k2.secret.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo8c5WpIyC_5kWKhS8VEYSZ05dYfuTF-ZdQFV4D9vLTcNQ
37 | ```
38 |
39 | ```
40 | k3.secret.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo-QkZKTlJWWl5iZmpucnZ6f
41 | ```
42 |
43 | ```
44 | k4.secret.cHFyc3R1dnd4eXp7fH1-f4CBgoOEhYaHiImKi4yNjo8c5WpIyC_5kWKhS8VEYSZ05dYfuTF-ZdQFV4D9vLTcNQ
45 | ```
46 |


--------------------------------------------------------------------------------
/types/sid.md:
--------------------------------------------------------------------------------
 1 | # PASERK Type: sid
 2 |
 3 | This kind of PASERK serves as a pointer to another PASERK, which is in
 4 | turn intended for `public` PASETOs.
 5 |
 6 | This is for serializing **secret keys** in a keypair.
 7 |
 8 | ## Format
 9 |
10 |     k[version].sid.[data]
11 |
12 | ## Calculations
13 |
14 | See [ID](../operations/ID.md) for the algorithm.
15 |
16 | ## Examples
17 |
18 | ```
19 | k1.sid.aBIISj44Kjs5PmIPh1q6DtTOTy2sz2ov14JJTch_5DHv
20 | ```
21 |
22 | ```
23 | k2.sid.9wfgiRJhydmagHQ9kKOOxQm3OXRTCPxkelCzxw1sJRkV
24 | ```
25 |
26 | ```
27 | k3.sid.mNalRnF8T60OMPdi1TWSMcub-51v3Au2VB1MOqPrw8zG
28 | ```
29 |
30 | ```
31 | k4.sid.gHYyx8y5YzqKEZeYoMDqUOKejdSnY_AWhYZiSCMjR1V5
32 | ```
33 |


--------------------------------------------------------------------------------

