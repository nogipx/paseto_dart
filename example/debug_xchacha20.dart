// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:convert';
import 'dart:typed_data';
import 'package:paseto_dart/chacha20/_index.dart';

/// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ XChaCha20 –Ω–∞–ø—Ä—è–º—É—é
void main() {
  print('üîç –û—Ç–ª–∞–¥–∫–∞ XChaCha20 —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');

  // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  final plaintext = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è';
  print('üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: $plaintext');
  final plaintextBytes = utf8.encode(plaintext);

  // 2. –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏ —Å–ª—É—á–∞–π–Ω—ã–π nonce
  final key =
      Uint8List.fromList(List.generate(32, (i) => i)); // 32-–±–∞–π—Ç–Ω—ã–π –∫–ª—é—á
  final nonce =
      Uint8List.fromList(List.generate(24, (i) => i + 100)); // 24-–±–∞–π—Ç–Ω—ã–π nonce

  // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º XChaCha20 –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
  final xchacha = XChaCha20();
  final keyParam = KeyParameter(key);
  final params = ParametersWithIV<KeyParameter>(keyParam, nonce);

  print('üîë –ö–ª—é—á: ${_bytesToHex(key)}');
  print('üîÑ Nonce: ${_bytesToHex(nonce)}');

  // 4. –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
  xchacha.init(true, params);
  final ciphertext = xchacha.process(Uint8List.fromList(plaintextBytes));
  print('üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (hex): ${_bytesToHex(ciphertext)}');

  // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä XChaCha20 –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
  final xchachaDec = XChaCha20();
  xchachaDec.init(false, params);

  // 6. –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
  final decrypted = xchachaDec.process(ciphertext);
  print('üîì –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (bytes): ${_bytesToHex(decrypted)}');

  // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–º
  if (_bytesEqual(decrypted, Uint8List.fromList(plaintextBytes))) {
    print('‚úÖ –£—Å–ø–µ—Ö! –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏');
    print('üî§ –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${utf8.decode(decrypted)}');
  } else {
    print('‚ùå –û—à–∏–±–∫–∞: –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏');
    printDifferences(decrypted, Uint8List.fromList(plaintextBytes));
  }

  // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
  try {
    final decodedText = utf8.decode(decrypted);
    print('‚úÖ UTF-8 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: $decodedText');
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ UTF-8 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    print('üìä –ü—Ä–∏—á–∏–Ω–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã');
  }
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–≤–Ω—ã –ª–∏ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –±–∞–π—Ç–æ–≤
bool _bytesEqual(List<int> a, List<int> b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    if (a[i] != b[i]) return false;
  }
  return true;
}

/// –í—ã–≤–æ–¥–∏—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
void printDifferences(List<int> actual, List<int> expected) {
  print('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤:');
  print('üìè –î–ª–∏–Ω–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${expected.length}');
  print('üìè –î–ª–∏–Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${actual.length}');

  final minLength =
      actual.length < expected.length ? actual.length : expected.length;
  var diffCount = 0;

  print('üîç –ü–µ—Ä–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:');
  for (var i = 0; i < minLength; i++) {
    if (actual[i] != expected[i]) {
      print(
          '   –ü–æ–∑–∏—Ü–∏—è $i: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expected[i]} (${expected[i].toRadixString(16)}), '
          '–ø–æ–ª—É—á–µ–Ω–æ ${actual[i]} (${actual[i].toRadixString(16)})');
      diffCount++;
      if (diffCount >= 10) {
        print('   ... –∏ –µ—â—ë ${minLength - i - 1} —Ä–∞–∑–ª–∏—á–∏–π');
        break;
      }
    }
  }
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
String _bytesToHex(List<int> bytes) {
  return bytes.map((b) => b.toRadixString(16).padLeft(2, '0')).join('');
}
