// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:convert';
import 'dart:typed_data';
import 'package:paseto_dart/paseto_dart.dart';

/// –ü—Ä–∏–º–µ—Ä —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é PASETO v4.local
///
/// PASETO v4.local –∏—Å–ø–æ–ª—å–∑—É–µ—Ç XChaCha20 –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ BLAKE2b –¥–ª—è MAC.
/// –≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ
/// —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–æ—Ä–æ–Ω–∞–º.
Future<void> main() async {
  // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (32 –±–∞–π—Ç–∞ –¥–ª—è v4.local)
  print('üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...');
  final secretKey = SecretKey(Uint8List.fromList(List.generate(32, (i) => i)));

  // –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
  final sensitiveData = {
    'userId': 12345,
    'email': 'user@example.com',
    'role': 'admin',
    'exp': DateTime.now().add(Duration(hours: 1)).millisecondsSinceEpoch ~/ 1000
  };
  print('üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: $sensitiveData');

  // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
  final package = Package(
    content: utf8.encode(jsonEncode(sensitiveData)),
  );

  // –®–∞–≥ 4: –®–∏—Ñ—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é LocalV4
  print('üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
  final encryptedPayload = await LocalV4.encrypt(
    package,
    secretKey: secretKey,
  );

  // –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
  final token = Token(
    header: LocalV4.header,
    payload: encryptedPayload,
    footer: null,
  );

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
  final tokenString = token.toTokenString;
  print('üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: $tokenString');

  // –®–∞–≥ 6: –î–µ—à–∏—Ñ—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–æ–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ)
  print('\nüîì –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');

  // –ò–∑ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–∫–µ–Ω–∞
  final receivedToken = await Token.fromString(tokenString);
  print('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–∫–µ–Ω v4.local
  if (receivedToken.header != LocalV4.header) {
    print('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
    return;
  }
  print('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ v4.local');

  // –î–µ—à–∏—Ñ—Ä—É–µ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≥–æ –∂–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
  final decrypted = await receivedToken.decryptLocalMessage(
    secretKey: secretKey,
  );

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–π—Ç–æ–≤ –≤ JSON
  try {
    final decodedPayload = jsonDecode(utf8.decode(decrypted.package.content));
    print('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $decodedPayload');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (exp)
    final expiration = decodedPayload['exp'] as int;
    final currentTime = DateTime.now().millisecondsSinceEpoch ~/ 1000;
    if (currentTime > expiration) {
      print('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω');
    } else {
      print('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ ${expiration - currentTime} —Å–µ–∫—É–Ω–¥');
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    print('üîç –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã: ${_bytesToHex(decrypted.package.content)}');
    print('üîç –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: ${decrypted.package.content.length}');
  }

  print('\n‚úÖ –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
String _bytesToHex(List<int> bytes) {
  return bytes.map((b) => b.toRadixString(16).padLeft(2, '0')).join('');
}
