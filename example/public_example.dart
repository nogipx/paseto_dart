// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:convert';
import 'package:paseto_dart/paseto_dart.dart';

/// –ü—Ä–∏–º–µ—Ä –ø–æ–¥–ø–∏—Å–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é PASETO v4.public
///
/// PASETO v4.public –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Ed25519 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π.
/// –≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
/// –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.
Future<void> main() async {
  // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã Ed25519
  print('üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã Ed25519...');
  final ed25519 = Ed25519();
  final keyPair = await ed25519.newKeyPair();
  final publicKey = await keyPair.extractPublicKey();

  final publicKeyBytes = publicKey.bytes;
  print('üîë –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (hex): ${_bytesToHex(publicKeyBytes)}');

  // –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)
  final userData = {
    'sub': 'user_12345',
    'name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
    'role': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    'exp': DateTime.now().add(Duration(hours: 1)).millisecondsSinceEpoch ~/ 1000
  };
  print('üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: $userData');

  // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
  final package = Package(
    content: utf8.encode(jsonEncode(userData)),
  );

  // –®–∞–≥ 4: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é PublicV4
  print('üîè –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
  final signedPayload = await PublicV4.sign(
    package,
    keyPair: keyPair,
  );

  // –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
  final token = Token(
    header: PublicV4.header,
    payload: signedPayload,
    footer: null,
  );

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
  final tokenString = token.toTokenString;
  print('üîè –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: $tokenString');

  // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–æ–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ)
  print('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞...');

  // –ò–∑ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–∫–µ–Ω–∞
  final receivedToken = await Token.fromString(tokenString);
  print('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–∫–µ–Ω v4.public
  if (receivedToken.header != PublicV4.header) {
    print('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
    return;
  }
  print('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ v4.public');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
  try {
    final verified = await receivedToken.verifyPublicMessage(
      publicKey: publicKey,
    );

    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
    try {
      final decodedPayload = jsonDecode(utf8.decode(verified.package.content));
      print('‚úÖ –ü–æ–¥–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      print('üì¶ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $decodedPayload');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      final expiration = decodedPayload['exp'] as int;
      final currentTime = DateTime.now().millisecondsSinceEpoch ~/ 1000;
      if (currentTime > expiration) {
        print('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω');
      } else {
        print('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ ${expiration - currentTime} —Å–µ–∫—É–Ω–¥');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
      print('üîç –ë–∞–π—Ç—ã –¥–∞–Ω–Ω—ã—Ö: ${_bytesToHex(verified.package.content)}');
      print('üîç –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: ${verified.package.content.length}');
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: $e');
    return;
  }

  // –®–∞–≥ 7: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–¥–µ–ª–∫–∏ —Ç–æ–∫–µ–Ω–∞
  print('\n‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏...');

  // –°–æ–∑–¥–∞–¥–∏–º –¥—Ä—É–≥—É—é –∫–ª—é—á–µ–≤—É—é –ø–∞—Ä—É, –∏–º–∏—Ç–∏—Ä—É—è –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞
  final attackerKeyPair = await ed25519.newKeyPair();
  final attackerPublicKey = await attackerKeyPair.extractPublicKey();

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
    await receivedToken.verifyPublicMessage(
      publicKey: attackerPublicKey,
    );
    print('‚ùå –£–Ø–ó–í–ò–ú–û–°–¢–¨: –ü–æ–¥–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —á—É–∂–∏–º –∫–ª—é—á–æ–º!');
  } catch (e) {
    // –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    print('‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—É–∂–∏–º –∫–ª—é—á–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
  }

  print('\n‚úÖ –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
String _bytesToHex(List<int> bytes) {
  return bytes.map((b) => b.toRadixString(16).padLeft(2, '0')).join('');
}
